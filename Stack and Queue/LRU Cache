class LRUCache {
public:
    int c;
    unordered_map<int, pair<int, int>> m;
    set<pair<int, int>> s;
    int t = 0;
    LRUCache(int capacity) {
        c = capacity;
    }
    int get(int k) {
        if (m.count(k)) {
            int v = m[k].first;
            int p = m[k].second;
            s.erase({p, k});
            t++;
            s.insert({t, k});
            m[k].second = t;
            return v;
        }
        return -1;
    }
    void put(int k, int v) {
        if (m.count(k)) {
            int p = m[k].second;
            s.erase({p, k});
            t++;
            s.insert({t, k});
            m[k] = {v, t};
        } else {
            if (m.size() == c) {
                int r = s.begin()->second;
                s.erase(s.begin());
                m.erase(r);
            }
            t++;
            m[k] = {v, t};
            s.insert({t, k});
        }
    }
};
