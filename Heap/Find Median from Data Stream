class MedianFinder {
public:
    priority_queue<int> maxHeap;
    priority_queue<int, vector<int>, greater<int>> minHeap; 
    MedianFinder() {

    }
    void addNum(int num) {
        if(minHeap.size()==0&&maxHeap.size()==0){minHeap.push(num);}
        else if(minHeap.size()!=0&&maxHeap.size()==0){
            if(minHeap.top()>num){maxHeap.push(num);}
            else{maxHeap.push(minHeap.top());minHeap.pop();minHeap.push(num);}
        }else if(minHeap.size()!=0&&maxHeap.size()!=0){
            if(minHeap.size()==maxHeap.size()){
                if(num>minHeap.top()){minHeap.push(num);}
                else{
                    if(num>maxHeap.top()){minHeap.push(num);}
                    else{minHeap.push(maxHeap.top());maxHeap.pop();maxHeap.push(num);}
                }
            }
            else{
                if(num<minHeap.top()){maxHeap.push(num);}
                else{maxHeap.push(minHeap.top());minHeap.pop();minHeap.push(num);}
            }
        }
    }
    double findMedian() {
        if (minHeap.size()>maxHeap.size()){return minHeap.top();}
        else{return (maxHeap.top() + minHeap.top()) / 2.0;}
    }
};
/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
